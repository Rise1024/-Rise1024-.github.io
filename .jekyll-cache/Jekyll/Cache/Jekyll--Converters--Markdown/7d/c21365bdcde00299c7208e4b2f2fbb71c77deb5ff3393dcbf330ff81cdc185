I"Q3<h2 id="初识简单工厂">初识简单工厂</h2>

<h3 id="定义">定义</h3>

<p>提供一个创建对象实例的功能，而无需关心其具体实现。被构建实例的类型可以是接口、抽象类，也可以是具体的类</p>

<h3 id="结构和说明">结构和说明</h3>

<p><img src="./assets/1.jpg" alt="" /></p>

<p><strong>APi：</strong> 定义客户所需要的功能接口</p>

<p><strong>Impl：</strong> 具体实现Api的实现类，可能会有多个</p>

<p><strong>Factory：</strong> 工厂，选择合适的实现类来创建Api的接口对象</p>

<p><strong>Client：</strong> 客户端，通过Factory去获取Api接口对象，然后面向Api接口编程</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Api</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">operation</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImplA</span> <span class="kd">implements</span> <span class="nc">Api</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实现a:"</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImplB</span> <span class="kd">implements</span> <span class="nc">Api</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实现b:"</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Api</span> <span class="nf">createApi</span><span class="o">(</span><span class="kt">int</span> <span class="n">condition</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">condition</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">ImplA</span><span class="o">();</span>
        <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">condition</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">ImplB</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Api</span> <span class="n">api</span> <span class="o">=</span> <span class="nc">Factory</span><span class="o">.</span><span class="na">createApi</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">api</span><span class="o">.</span><span class="na">operation</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
        <span class="n">api</span> <span class="o">=</span> <span class="nc">Factory</span><span class="o">.</span><span class="na">createApi</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">api</span><span class="o">.</span><span class="na">operation</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="接口回顾">接口回顾：</h3>

<ol>
  <li>
    <p>Java 中接口的概念：在 Java 中接口是一种特殊的抽象类</p>
  </li>
  <li>
    <p>接口用来干什么:</p>

    <p>通常用接口来定义实现类的外观，就相当于一份契约，根据外部应用需要的功能，约定了实现类应该要实现的功能</p>
  </li>
  <li>
    <p>接口的思想： 封装隔离</p>
  </li>
  <li>
    <p>使用接口的好处</p>

    <p>只要接口不变，内部实现的变化就不会影响到外部应用，从而使得系统更灵活，具有更好的扩展性和可维护性</p>
  </li>
  <li>
    <p>接口和抽象类的选择</p>

    <p>（1）：优先选用接口</p>

    <p>（2）：在如下情况选抽象类：既要定义子类的行为，又要为子类提供公共的功能</p>
  </li>
</ol>

<h3 id="面向接口编程回顾">面向接口编程回顾：</h3>

<p>面向接口编程是 Java 编程中的一个重要原则。在 Java 程序设计里面，非常讲究层的划分和模块的划分。</p>

<p>比如常见的三层结构
在一个层内部的各个模块交互也要通过接口
不管是一层还是一个模块或则一个组件，都是一个被接口隔离的整体</p>

<hr />

<h2 id="体会简单工厂">体会简单工厂</h2>

<h3 id="不用模式的解决方案">不用模式的解决方案</h3>

<p><img src="./assets/2.jpg" alt="" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Api</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Impl</span> <span class="kd">implements</span> <span class="nc">Api</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"不用模式的解决方案:"</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Api</span> <span class="n">api</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Impl</span><span class="o">();</span>
        <span class="n">api</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="用模式的解决方案">用模式的解决方案</h3>
<p>参考上面的 <strong>结构和说明</strong> 中的代码</p>

<hr />

<h2 id="理解简单工厂">理解简单工厂</h2>

<h3 id="一个典型的疑问">一个典型的疑问</h3>

<p><strong>首先来解决一个常见的疑问：</strong> 可能有朋友会认为，上面的示列中的简单工厂看起来不就是把客户端里面的 <code class="language-plaintext highlighter-rouge">new Impl()</code> 移动到简单工厂里面吗？不还是一样通过 new  实现类来得到接口吗？  把 <code class="language-plaintext highlighter-rouge">new Impl()</code> 这句话放到客户端和放到简单工厂里面有什么不同吗？</p>

<p><code class="language-plaintext highlighter-rouge">理解这个问题的重点就在于理解简单工厂所处的位置。</code></p>

<p><img src="./assets/3.jpg" alt="" /></p>

<p>红框代表一个封装体，完全在红框中的为封装体内部的，工厂和接口暴露了一部分给外部。</p>

<h3 id="认识简单工厂">认识简单工厂</h3>

<ol>
  <li>
    <p>简单工厂的功能</p>

    <p>可以用来创建接口、抽象类或则是普通类的实例</p>
  </li>
  <li>
    <p>静态工厂</p>

    <p>通常把简单工厂类实现成一个工具类，直接使用静态方法就可以了，也就是说简单工厂的方法通常都是静态的，所以也被称为静态工厂</p>
  </li>
  <li>
    <p>万能工厂</p>

    <p>一个简单工厂理论上可以用来构造任何对象，所以又称之为“万能工厂”</p>
  </li>
  <li>
    <p>简单工厂创建对象的范围</p>

    <p>建议控制在一个独立的组件级别或则一个模块级别</p>
  </li>
  <li>
    <p>简单工厂的调用顺序示意图</p>
  </li>
</ol>

<p><img src="./assets/4.jpg" alt="" /></p>

<ol>
  <li>
    <p>简单工厂命名的建议</p>

    <ol>
      <li>类名建议为：“模块名称 + Factory ”</li>
      <li>方法名通常为：“ get + 接口名称”或则是“ create + 接口名称”</li>
      <li>不建议把方法名称命名为 new + 接口名称</li>
    </ol>
  </li>
</ol>

<h3 id="简单工厂中方法的写法">简单工厂中方法的写法</h3>

<p>简单工方法的内部主要实现的功能是“选择合适的实现类”来创建实例对象</p>

<p>选择 –&gt; 如何选? —&gt; 选择的参数 –&gt; 参数从何而来？</p>

<ol>
  <li>参数来源于client</li>
  <li>参数来源于配置文件</li>
  <li>参数来源于系统自身，比如运行期间的某个值</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">注：</code>如果是从客户端在调用工厂的时候，传入选择的参数，这就说明客户端必须知道每个参数的含义，也需要理解每个参数对应的功能处理。这就要求必须在一定程度上，向客户暴露一定的内部实现细节。</p>

<h3 id="可配置的简单工厂">可配置的简单工厂</h3>

<p>使用反射加上配置文件，来实现添加新的实现类过后，无需修改代码，就能把这个新的实现类加入应用中。</p>

<p>可配置的简单工厂，也是通过选择，但是这个选择不是体现在方法中了。 而是通过配置文件</p>

<p>这里配置是配置一些参数，用于选择哪一个实现。</p>

<h3 id="简单工厂的优缺点">简单工厂的优缺点：</h3>

<p><strong>优点：</strong></p>

<ol>
  <li>帮助封装： 真正实现面向接口编程</li>
  <li>解耦：客户端和具体实现可以解耦</li>
</ol>

<p><strong>缺点：</strong></p>

<ol>
  <li>可能增加客户端的复杂度：需要调用接口，就得了解这些参数的含义</li>
  <li>不方便扩展子工程</li>
</ol>

<hr />

<h2 id="思考简单工厂">思考简单工厂</h2>

<h3 id="简单工厂的本质">简单工厂的本质</h3>

<p>简单工厂的本质是： 选择实现 <strong>重点是选择</strong></p>

<h3 id="何时选用简单工厂">何时选用简单工厂：</h3>

<ol>
  <li>
    <p>如果想要完全封装隔离具体实现，让外部只能通过接口来操作封装体，那么可以选用简单工厂，让客户端通过工厂来获取相应的接口，而无需关心具体实现。</p>
  </li>
  <li>
    <p>如果想要把对外创建对象的职责集中管理和控制，可以选用简单工厂，一个简单工厂可以创建很多的、不相关的对象，可以把对外创建对象的职责集中到一个简单工厂来，从而实现集中管理和控制</p>
  </li>
</ol>

:ET