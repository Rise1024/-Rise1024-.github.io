I"'$<h2 id="初识外观模式">初识外观模式</h2>
<h3 id="定义">定义：</h3>
<p>为子系统中<code class="language-plaintext highlighter-rouge">一组接口</code>提供一个<code class="language-plaintext highlighter-rouge">一致的界面</code>，Facade模式定义了<code class="language-plaintext highlighter-rouge">一个高层接口</code>，这个接口使得这一子系统<code class="language-plaintext highlighter-rouge">更加容易使用</code></p>

<h3 id="结构和说明">结构和说明：</h3>
<p><img src="/assets/img/posts/20220518/design_pattern/facsde/1.jpg" alt="" /></p>

<p><strong>界面：</strong>从客户端来看待这个系统，能看到的东西
<strong>Facade ：</strong> 定义子系统的多个模块对外的高层接口，通常需要调用内部多个模块，从而<code class="language-plaintext highlighter-rouge">把客户的请求代理给适当的子系统对象</code>。
<strong>模块：</strong>接收Facade对象的委派，真正实现功能，各个模块之间可能有交互。<code class="language-plaintext highlighter-rouge">☂注意：</code>Facade对象知道各个模块，但是各个模块不应该知道Facade对象</p>

<hr />

<h2 id="体会外观模式">体会外观模式</h2>
<h3 id="生活中的示列组装电脑">生活中的示列：组装电脑</h3>
<ol>
  <li>
    <p>完全自己组装
<img src="/assets/img/posts/20220518/design_pattern/facsde/2.jpg" alt="" /></p>
  </li>
  <li>
    <p>找专业装机公司组装
<img src="/assets/img/posts/20220518/design_pattern/facsde/3.jpg" alt="" /></p>
  </li>
</ol>

<h3 id="工具示例代码生成工具">工具示例：代码生成工具</h3>
<p><img src="/assets/img/posts/20220518/design_pattern/facsde/4.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">问题：</code>如果现在客户端需要使用这个代码生成工具来生成需要的基础代码，该如何来实现呢？</p>

<h3 id="不用模式解决方案">不用模式解决方案</h3>

<p><img src="/assets/img/posts/20220518/design_pattern/facsde/5.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">存在的问题：</code>客户端为了使用生成代码的功能，需要与生成代码子系统内部的多个模块交互</p>

<h3 id="使用模式解决方案">使用模式解决方案</h3>
<p><img src="/assets/img/posts/20220518/design_pattern/facsde/6.jpg" alt="" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AModuleApi</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AModuleImpl</span> <span class="kd">implements</span> <span class="nc">AModuleApi</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模块a"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BModuleApi</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BModuleImpl</span> <span class="kd">implements</span> <span class="nc">AModuleApi</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模块b"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CModuleApi</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CModuleImpl</span> <span class="kd">implements</span> <span class="nc">AModuleApi</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模块"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Facade</span> <span class="o">{</span>
    <span class="cm">/**
     * 满足客户端需要的方法
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(){</span>
        <span class="c1">// 内部实现的时候，可能会调用各个模块</span>
		<span class="c1">// 如果遇到这样一种情况，需要按顺序调用这3个方法，那么在客户端使用的时候还需要搞懂先调用什么后调用什么，就很不方便了，所以使用外观模式封装起来</span>
        <span class="k">new</span> <span class="nf">AModuleImpl</span><span class="o">().</span><span class="na">test</span><span class="o">();</span>
        <span class="k">new</span> <span class="nf">BModuleImpl</span><span class="o">().</span><span class="na">test</span><span class="o">();</span>
        <span class="k">new</span> <span class="nf">CModuleImpl</span><span class="o">().</span><span class="na">test</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 这里使用外观模式，就不再需要客户端与各个模块直接打交道了</span>
        <span class="k">new</span> <span class="nf">Facade</span><span class="o">().</span><span class="na">test</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="理解外观模式">理解外观模式</h2>
<h3 id="认识外观模式">认识外观模式</h3>
<ol>
  <li>
    <p>外观模式的<code class="language-plaintext highlighter-rouge">目的不是给子系统添加新的功能接口</code>，<code class="language-plaintext highlighter-rouge">而是为了让外部减少与子系统内多个模块的交互，松散耦合</code>，从而让外部能够更简单的使用子系统。
<code class="language-plaintext highlighter-rouge">不能在外观模式的接口或则类中直接实现客户端的功能。应该是包装组合已有的功能</code>，来满足客户端的需求</p>
  </li>
  <li>
    <p>使用外观跟不使用外观有何变化？
Facade方便了客户端的调用、封装了系统内部的细节功能、实现功能的共享和复用
<img src="/assets/img/posts/20220518/design_pattern/facsde/7.jpg" alt="" />
<code class="language-plaintext highlighter-rouge">重点在于Facade的位置</code>，Facade属于红框中的一部分。所以facade是可以知道具体实现的。 而客户端确是不知道的</p>
  </li>
  <li>
    <p>有外观，但是可以不使用</p>
  </li>
  <li>
    <p>外观提供了缺省的调用
（对常用的进行一些包装，如果有特殊的需求，就使用第三点，直接调用具体的实现）</p>
  </li>
  <li>
    <p>外观模式的调用顺序示意图
<img src="/assets/img/posts/20220518/design_pattern/facsde/8.jpg" alt="" /></p>
  </li>
</ol>

<h3 id="外观模式的实现">外观模式的实现</h3>
<ol>
  <li>把外观类当成一个辅助工具类实现</li>
  <li>
    <p>facade可以实现为interface
<img src="/assets/img/posts/20220518/design_pattern/facsde/9.jpg" alt="" /></p>
  </li>
  <li>Facade实现称为interface的附带好处
能够有选择性的暴露接口方法，尽量减少模块对 外提供的接口方法。</li>
  <li>Facade的方法实现
Facade的方法实现中，一般是负责把客户端的请求转发给子系统内部的各个模块进行处理，Facade的方法本身并不进行功能的处理，Facade的方法的实现只是实现一个功能的组合调用</li>
</ol>

:ET